# -*- coding: utf-8 -*-
# imports: libraries
import psycopg2
import telebot
from telebot import types
import datetime

import matplotlib as mpl
import matplotlib.pyplot as plt
# imports: modules and configuration files
import config


# connection to database on Heroku (Heroku Postgres)
connect = psycopg2.connect(database='d1eam1hffgoggg',
                           user='ravnyccawkzsbx',
                           host='ec2-54-235-246-67.compute-1.amazonaws.com',
                           password='0lo2zjah68Y2pHef7jRrh9KjqO')
cursor = connect.cursor()

# create a bot (token was generated by BotFather)
bot = telebot.TeleBot(config.token)


# start method - run when user send start
# There is description of bot's functionality
@bot.message_handler(commands=['start'])
def show_start_message(message):
    user_is_not_alive = True
    cursor.execute("select id_user " +
                   "from users " +
                   "where id_user=" + str(message.chat.id))
    for row in cursor:
        user_is_not_alive = False
    if user_is_not_alive:
        cursor.execute("insert into users (id_user, days) values (" + str(message.chat.id) + ",5)")
        connect.commit()
    hello_message = "Добро пожаловать!\n" \
                    "/help - команды\n" \
                    "/bills_types - доступные квитанции\n" \
                    "/md_types - квитанции, по которым можно передать показания\n" \
                    "/clever_notification - умные уведомления"
    bot.send_message(message.chat.id, hello_message)


# Send list of all commands with descriptions
@bot.message_handler(commands=['help'])
def show_start_message(message):
    help_message = "/bills_types - показать список квитанций \n" \
                   "/active_bills - просмотр подключенных понаминаний об оплате квитанций \n" \
                   "/md_types - квитанции, по которым можно передать показания\n" \
                   "/active_md - список подключенных напоминаний о передаче показаний\n" \
                   "/days - установка числа - за сколько дней необходимо начать присылать напоминание \n" \
                   "/clear - удалить все активные напоминания об оплате квитанции\n" \
                   "/clear_md - удалить все активные напоминания о передаче показаний \n" \
                   "/clever_notification - умные уведомления\n" \
                   "/send_meter_data - сбор показаний для статистики\n" \
                   "/graphics - график по статистике \n" \
                   "/help - список всех команд\n "\
                   "/description - описание работы бота"
    bot.send_message(message.chat.id, help_message)


# Send 'days' and offer to enter new value
# 'days' is a number, if finish date is 12 and days is 3, then bot will send notifications since 10 to 12 days of month
# or since 9 to 11 ???????
@bot.message_handler(commands=['description'])
def show_start_message(message):
    bot.send_message(message.chat.id, "Для того что бы квитанция добавилась "
                                      "в список ваших активных напоминаний об "
                                      "оплате перейдите в /bills_types и нажмите на "
                                      "/t_n (где n- номер квитанции), при повторном"
                                      " нажатии вы сможете удалить эту квитанцию из "
                                      "активных. \n Для активации напоминаний о передаче "
                                      "показаний перейдите в пункт /md_types и проделайте те же операции.\n"
                                      "Все эти напоминания будут приходить несколько дней подряд до конечной "
                                      "даты напоминания. Это количество дней можно изменить в пункте /days\n"
                                      "Активные квитанции можно просмотреть в /active_bills /active_md\n"
                                      "Удалить все активные квитанции вы можете в пунктах меню /clear и /clear_md\n"
                                      "Так же вам могут приходить не куча напоминаний об оплате каждой квитанции,"
                                      " а одно напоминание об оплате всех квитанций. Эту опцию возможно подключить в "
                                      "/clever_notification\n"
                                      "Для того, что бы мы могли составлять графики со статистикой потребления,"
                                      " вам необходимо будет присылать свои показания в /send_meter_data\n"
                                      "Для просмотра графика воспользуйтесь /graphics")

@bot.message_handler(commands=['days'])
def show_start_message(message):
    cursor.execute("select days from users where id_user=" + str(message.chat.id))
    days = None
    for row in cursor:
        days = row[0]
    days_message = "В течении " + str(days) + " дней будет приходить напоминание об оплате квитанции и передаче показаний."
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.row('Да')
    markup.row('Нет')
    msg = bot.send_message(message.chat.id, days_message + "Хотите изменить это число?", reply_markup=markup)
    bot.register_next_step_handler(msg, response_change_days)


def response_change_days(message):
    if message.text == 'Да':
        msg = bot.send_message(message.chat.id, "Введите число: ")
        bot.register_next_step_handler(msg, change_days)


def change_days(message):
    if message.text.isdigit():
        if 0 < int(message.text) <= 25:
            cursor.execute("Update users set days=" + str(message.text) + " where id_user=" + str(message.chat.id))
            connect.commit()
            bot.send_message(message.chat.id, "Число изменено.")
            return
        else:
            msg = bot.send_message(message.chat.id, "Days может быть в пределах от 1 до 25 :( \nВведите число: ")
    else:
        msg = bot.send_message(message.chat.id, "Вы уверены, что ввели число? \nВведите число: ")
    bot.register_next_step_handler(msg, change_days)

######################################################################################################################

# Show all bill's types, which is available in database
@bot.message_handler(commands=['bills_types'])
def show_start_message(message):
    bot.send_message(message.chat.id, "Список квитанций: \n")
    cursor.execute("SELECT ticket_name, active_row FROM all_tickets;")
    bills_types_message = ""
    for row in cursor:
        bills_types_message = bills_types_message + row[0].strip() + " " + row[1] + "\n"
    bot.send_message(message.chat.id, bills_types_message)


# Show all active bills
# Active bills is a bills, that the user added
@bot.message_handler(commands=['active_bills'])
def show_start_message(message):
    cursor.execute("select all_tickets.active_row, " +
                   "all_tickets.ticket_name, " +
                   "user_tickets.finish_date " +
                   "from all_tickets " +
                   "left outer join user_tickets " +
                   "on user_tickets.id_ticket=all_tickets.id_ticket " +
                   "where user_tickets.id_user=" + str(message.chat.id))
    active_bills_message = ""
    for row in cursor:
        active_bills_message = active_bills_message + row[0].strip() + " " + row[1].strip() + " оплатить до " + \
                               str(row[2]) + " числа"+"\n"
    if active_bills_message != "":
        bot.send_message(message.chat.id, "Список ваших активных квитанций: \n" + active_bills_message)
    else:
        bot.send_message(message.chat.id, "Вы еще не подключили ни одного напоминания об оплате квитанции." +
                                          " Для того, чтобы активировать квитанцию, перейдите в /bills_types")


# Send a message: delete or add a bill
@bot.message_handler(commands=['t_1', 't_2', 't_3', 't_4', 't_5', 't_6', 't_7', 't_8', 't_9', 't_10', 't_11'])
def add_ticket(message):
    cursor.execute("select user_tickets.id_user, all_tickets.active_row " +
                   "from user_tickets " +
                   "left outer join all_tickets " +
                   "on all_tickets.id_ticket=user_tickets.id_ticket " +
                   "where user_tickets.id_user=" + str(message.chat.id))
    for row in cursor:
        if (str(row[0]) == str(message.chat.id)) and (str(row[1]).strip() == str(message.text)):
            bot.send_message(message.chat.id, "Квитанция " + message.text + " у вас есть")
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            bill=message.text
            markup.row('Изменить дату последнего напоминания')
            markup.row('Удалить квитанцию')
            markup.row('Ничего не делать')
            msg = bot.send_message(message.chat.id, "Что желаете сделать?", reply_markup=markup)
            bot.register_next_step_handler(msg, lambda message:delete_active_bill(message,bill))
            return
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.row('Добавить ' + message.text)
    markup.row('Нет ')
    msg = bot.send_message(message.chat.id, "Добавить квитанцию?", reply_markup=markup)
    bot.register_next_step_handler(msg, add_available_bill)


def delete_active_bill(message, bill):
    if message.text == "Ничего не делать":
        return
    if message.text == "Удалить квитанцию":
        cursor.execute("select id_ticket from all_tickets where active_row =" + "\'" + bill + "\'")
        id_bill = None
        for new_row in cursor:
            id_bill = new_row[0]
        cursor.execute(
                "delete from user_tickets where id_user=" + str(message.chat.id) + " and id_ticket=" + str(id_bill))
        connect.commit()
        bot.send_message(message.chat.id, "Квитанция " + bill + " удалена!")
    if message.text == "Изменить дату последнего напоминания":
        msg = bot.send_message(message.chat.id, "Введите число: ")
        bot.register_next_step_handler(msg, lambda message: update_finish_date(message, bill))

def update_finish_date(message, bill):
    if message.text.isdigit():
        if 0 < int(message.text) <= 31:
            cursor.execute("select id_ticket from all_tickets where active_row =" + "\'" + bill + "\'")
            id_bill = None
            for new_row in cursor:
                id_bill = new_row[0]
            cursor.execute("Update user_tickets set finish_date=" + str(message.text) + " where id_user=" + str(message.chat.id)+" and id_ticket="+str(id_bill))
            connect.commit()
            bot.send_message(message.chat.id, "Дата последнего напоминания изменена на "+str(message.text))
            return
        else:
            msg = bot.send_message(message.chat.id, "Число может быть в пределах от 1 до 31 :( \nВведите число: ")
    else:
        msg = bot.send_message(message.chat.id, "Вы уверены, что ввели число? \nВведите число: ")
    bot.register_next_step_handler(msg, lambda message: update_finish_date(message, bill))


def add_available_bill(message):
    try:
        answer, bill = message.text.split(' ')
    except ValueError:
        return
    if answer == "Нет":
        return
    if answer == "Добавить":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.row('Да')
        markup.row('Нет')
        msg = bot.send_message(message.chat.id,
                               "По умолчанию до 10го числа каждого месяца будут приходить напоминания.\n" +
                               "Хотите изменить эту дату?",
                               reply_markup=markup)
        bot.register_next_step_handler(msg, lambda message: add_available_bill_with_finish_data(message, bill))


def add_available_bill_with_finish_data(message, bill):
    answer = message.text
    if answer == "Нет":
        cursor.execute("select id_ticket from all_tickets where active_row =" + "\'" + bill + "\'")
        id_bill = None
        for new_row in cursor:
            id_bill = new_row[0]
        cursor.execute("insert into user_tickets "
                       "(id_user, id_ticket, finish_date) "
                       "values (" + str(message.chat.id) + ","
                       + str(id_bill) + "," + str(10) + ")")
        connect.commit()
        bot.send_message(message.chat.id, "Квитанция " + bill + " добавлена!")
    if answer == "Да":
        msg = bot.send_message(message.chat.id, "Введите число: ")
        bot.register_next_step_handler(msg, lambda message: finish_day(bill, message))


def finish_day(bill, message):
    if message.text.isdigit():
        if 1 <= int(message.text) <= 31:
            cursor.execute("select id_ticket from all_tickets where active_row =" + "\'" + bill + "\'")
            id_bill = None
            for new_row in cursor:
                id_bill = new_row[0]
            cursor.execute("insert into user_tickets " +
                           "(id_user, id_ticket, finish_date) "
                           "values (" + str(message.chat.id) + "," +
                           str(id_bill) + "," + str(message.text) + ")")
            connect.commit()
            bot.send_message(message.chat.id, "Квитанция " + bill + " добавлена!")
            return
        else: msg = bot.send_message(message.chat.id, "Число должно быть в пределах от 1 до 31!" + "\nВведите число: ")
    else:
        msg = bot.send_message(message.chat.id, "Не обижай ботю, в следующий раз введи число!" + "\nВведите число: ")
    bot.register_next_step_handler(msg, lambda message: finish_day(bill, message))

#######################################################################################################################

@bot.message_handler(commands=['md_types'])
def show_start_message(message):
    bot.send_message(message.chat.id, "Список квитанций, по которым могут приходить напоминания о передаче показаний:\n ")
    cursor.execute("SELECT md_name, md_active_row FROM meter_data_types;")
    md_types_message = ""
    for row in cursor:
        md_types_message = md_types_message + row[0].strip() + " " + row[1] + "\n"
    bot.send_message(message.chat.id, md_types_message)

@bot.message_handler(commands=['active_md'])
def show_start_message(message):
    cursor.execute("select md_active_row, "
                   "md_name, "
                   "finish_mdt_date "
                   "from meter_data_types "
                   "left outer join user_meter_data "
                   "on meter_data_types.id_mdt = user_meter_data.id_mdt "
                   "where user_meter_data.id_user = " + str(message.chat.id))
    active_md_message = ""
    for row in cursor:
        active_md_message = active_md_message + row[0].strip() + " " + row[1].strip() + " передать показания до " + \
                               str(row[2]) + " числа"+"\n"
    if active_md_message != "":
        bot.send_message(message.chat.id, "Cписок подключенных напоминаний о передаче показаний: \n" + active_md_message)
    else:
        bot.send_message(message.chat.id, "Вы еще не подключили ни одной квитанции." +
                                          " Для того, чтобы активировать напоминание опередаче показаний, перейдите в /md_types")

@bot.message_handler(commands=['md_1', 'md_2', 'md_3', 'md_4'])
def add_ticket(message):
    cursor.execute("select user_meter_data.id_user, meter_data_types.md_active_row " +
                   "from user_meter_data " +
                   "left outer join meter_data_types " +
                   "on meter_data_types.id_mdt=user_meter_data.id_mdt " +
                   "where user_meter_data.id_user=" + str(message.chat.id))
    for row in cursor:
        if (str(row[0]) == str(message.chat.id)) and (str(row[1]).strip() == str(message.text)):
            bot.send_message(message.chat.id, "Напоминание о передаче показаний по квитанции " + message.text + " у вас есть")
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            md=message.text
            markup.row('Изменить дату последнего напоминания')
            markup.row('Удалить напоминание')
            markup.row('Ничего не делать')
            msg = bot.send_message(message.chat.id, "Что желаете сделать?", reply_markup=markup)
            bot.register_next_step_handler(msg, lambda message: delete_active_md(message,md))
            return
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.row('Добавить ' + message.text)
    markup.row('Нет ')
    msg = bot.send_message(message.chat.id, "Добавить квитанцию?", reply_markup=markup)
    bot.register_next_step_handler(msg, add_available_md)


def delete_active_md(message,md):
    if message.text == "Ничего не делать":
        return
    if message.text == "Удалить напоминание":
        cursor.execute("select id_mdt from meter_data_types where md_active_row =" + "\'" + md + "\'")
        id_mdt = None
        for new_row in cursor:
            id_mdt = new_row[0]
        cursor.execute(
                "delete from user_meter_data where id_user=" + str(message.chat.id) + " and id_mdt=" + str(id_mdt))
        connect.commit()
        bot.send_message(message.chat.id, "Напоминание о передаче показаний " + md + " удалено!")
    if message.text == "Изменить дату последнего напоминания":
        msg = bot.send_message(message.chat.id, "Введите число: ")
        bot.register_next_step_handler(msg, lambda message: update_finish_date_md(message, md))

def update_finish_date_md(message, md):
    if message.text.isdigit():
        if 0 < int(message.text) <= 31:
            cursor.execute("select id_mdt from meter_data_types where md_active_row =" + "\'" + md + "\'")
            id_mdt = None
            for new_row in cursor:
                id_mdt = new_row[0]
            cursor.execute("Update user_meter_data set finish_mdt_date=" + str(message.text) + " where id_user=" + str(message.chat.id)+" and id_mdt="+str(id_mdt))
            connect.commit()
            bot.send_message(message.chat.id, "Дата последнего напоминания изменена на "+str(message.text))
            return
        else:
            msg = bot.send_message(message.chat.id, "Число может быть в пределах от 1 до 31 :( \nВведите число: ")
    else:
        msg = bot.send_message(message.chat.id, "Вы уверены, что ввели число? \nВведите число: ")
    bot.register_next_step_handler(msg, lambda message: update_finish_date_md(message, md))


def add_available_md(message):
    try:
        answer, md = message.text.split(' ')
    except ValueError:
        return
    if answer == "Нет":
        return
    if answer == "Добавить":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.row('Да')
        markup.row('Нет')
        msg = bot.send_message(message.chat.id,
                               "По умолчанию до 23го числа каждого месяца будут приходить напоминания.\n" +
                               "Хотите изменить эту дату?",
                               reply_markup=markup)
        bot.register_next_step_handler(msg, lambda message: add_available_bill_with_finish_data_md(message, md))


def add_available_bill_with_finish_data_md(message, md):
    answer = message.text
    if answer == "Нет":
        cursor.execute("select id_mdt from meter_data_types where md_active_row =" + "\'" + md + "\'")
        id_mdt = None
        for new_row in cursor:
            id_mdt = new_row[0]
        cursor.execute("insert into user_meter_data "
                       "(id_user, id_mdt, finish_mdt_date) "
                       "values (" + str(message.chat.id) + ","
                       + str(id_mdt) + "," + str(23) + ")")
        connect.commit()
        bot.send_message(message.chat.id, "Квитанция " + md + " добавлена!")
    if answer == "Да":
        msg = bot.send_message(message.chat.id, "Введите число: ")
        bot.register_next_step_handler(msg, lambda message: finish_mdt_day(md, message))


def finish_mdt_day(md, message):
    if message.text.isdigit():
        if 1 <= int(message.text) <= 31:
            cursor.execute("select id_mdt from meter_data_types where md_active_row =" + "\'" + md + "\'")
            id_mdt = None
            for new_row in cursor:
                id_mdt = new_row[0]
            cursor.execute("insert into user_meter_data "
                       "(id_user, id_mdt, finish_mdt_date) "
                       "values (" + str(message.chat.id) + ","
                       + str(id_mdt) + "," + str(message.text) + ")")
            connect.commit()
            bot.send_message(message.chat.id, "Квитанция " + md + " добавлена!")
            return
        else: msg = bot.send_message(message.chat.id, "Число должно быть в пределах от 1 до 31!" + "\nВведите число: ")
    else:
        msg = bot.send_message(message.chat.id, "Не обижай ботю, в следующий раз введи число!" + "\nВведите число: ")
    bot.register_next_step_handler(msg, lambda message: finish_mdt_day(md, message))

    #########################################################################################################
@bot.message_handler(commands=['clear_md'])
def show_start_message(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.row('Да')
    markup.row('Нет')
    msg = bot.send_message(message.chat.id, "Хотите удалить все активные напоминания о передаче показаний?", reply_markup=markup)
    bot.register_next_step_handler(msg, clear_md)


def clear_md(message):
    if message.text == 'Да':
        cursor.execute("delete from user_meter_data where id_user=" + str(message.chat.id))
        connect.commit()
        bot.send_message(message.chat.id, "Ваши активные напоминания о передаче показаний удалены")
    ###########################################################################################################
# Delete all user's active bills
@bot.message_handler(commands=['clear'])
def show_start_message(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.row('Да')
    markup.row('Нет')
    msg = bot.send_message(message.chat.id, "Хотите удалить все активные напоминания об оплате квитанций?", reply_markup=markup)
    bot.register_next_step_handler(msg, clear)


def clear(message):
    if message.text == 'Да':
        cursor.execute("delete from user_tickets where id_user=" + str(message.chat.id))
        connect.commit()
        bot.send_message(message.chat.id, "Ваши активные напоминания об оплате квитанций удалены")

###################################################################################################################

@bot.message_handler(commands=['clever_notification'])
def clever_notification(message):
    cursor.execute("select id_user " +
                   "from user_notification " +
                   "where id_user=" + str(message.chat.id))
    for row in cursor:
        if (str(row[0]) == str(message.chat.id)):
            bot.send_message(message.chat.id, "У вас подключена услуга - умные уведомления ")
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            markup.row('Да')
            markup.row('Нет')
            msg = bot.send_message(message.chat.id, "Хотите отключить?", reply_markup=markup)
            bot.register_next_step_handler(msg, delete_clever_notification)
            return
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.row('Да')
    markup.row('Нет')
    msg = bot.send_message(message.chat.id, "Умное уведомление - это когда к вам приходит напоминания о ближайщей дате оплаты всех квитанций.  Хотите подлючить?", reply_markup=markup)
    bot.register_next_step_handler(msg, add_clever_notification)

def delete_clever_notification(message):
    if message.text == "Нет":
        return
    if message.text == "Да":
        cursor.execute(
                "delete from user_notification where id_user=" + str(message.chat.id))
        connect.commit()
        bot.send_message(message.chat.id, "Услуга отключена")


def add_clever_notification(message):
    if message.text == "Нет":
        return
    if message.text == "Да":
        cursor.execute("insert into user_notification " +
                           "(id_user) " +
                           "values (" + str(message.chat.id) +")")
        connect.commit()
        bot.send_message(message.chat.id, "Услуга подключена")


########################################################################################################################
########################## ДОБАВЛЕНИЕ ПОКАЗАНИЙ ########################################################################

@bot.message_handler(commands=['send_meter_data'])
def begin_meter_data(message):
    # вывод списка типов показаний по квитанциям
    cursor.execute("SELECT md_name, md_active_row FROM meter_data_types;")
    md_types_message = ""
    meter_data_type_collection = []
    for row in cursor:
        md_types_message = md_types_message + row[0].strip() + " " + row[1] + '_' + "\n"
        meter_data_type_collection.append(row[1])
    msg = bot.send_message(message.chat.id, "По каким квитанциям вы хотите передать показания:\n " + md_types_message)
    bot.register_next_step_handler(msg, lambda next_message: enter_meter_data(next_message, meter_data_type_collection))


def enter_meter_data(message, meter_data_type_collection):
    # спрашиваем показания
    # проверка на правильный тип
    meter_data_type = message.text
    try:
        meter_data_type_collection.index(meter_data_type[0:len(meter_data_type)-1])
    except ValueError:
        msg = bot.send_message(message.chat.id, "Что-то пошло не так... попробуйте снова /send_meter_data")
        return
    bot.send_message(message.chat.id, "Ок. Я запомнил. " + meter_data_type)
    enter_meter_data_call(message, meter_data_type)


def enter_meter_data_call(message, meter_data_type):
    # передает показания в следующий хендлер
    msg = bot.send_message(message.chat.id, "Введите показания "
                                            "(если у вас несколько счетчиков, "
                                            "то показания записываются через ПРОБЕЛ. "
                                            "И заметьте, что вместо запятой в числах -- ТОЧКА!):\n ")
    bot.register_next_step_handler(msg, lambda next_message: enter_meter_data_period(next_message, meter_data_type))


def enter_meter_data_period(message, meter_data_type):
    # спрашиваем период
    meter_data = message.text
    # проверка
    for value in meter_data.split(' '):
        try:
            float(value)
        except ValueError:
            enter_meter_data_call(message, meter_data_type)
            return
    bot.send_message(message.chat.id, "Ок. Я запомнил. " + meter_data)
    enter_meter_data_period_call(message, meter_data_type, meter_data)


def enter_meter_data_period_call(message, meter_data_type, meter_data):
    msg = bot.send_message(message.chat.id, "Введите период (формат ГГГГММ, например, 201402 - февраль 2014):\n ")
    bot.register_next_step_handler(msg, lambda next_message: send_meter_data(next_message, meter_data_type, meter_data))


def send_meter_data(message, meter_data_type, meter_data):
    meter_data_period = message.text
    year = meter_data_period[0:4]
    month = meter_data_period[4:len(meter_data_period)]

    cursor.execute("select id_mdt from meter_data_types where md_active_row =" + "\'" +
                   meter_data_type[0:len(meter_data_type)-1] + "\'")
    id_mdt = None
    for new_row in cursor:
        id_mdt = new_row[0]

    try:
        if not ((1 <= int(month) <= 12) and (2000 <= int(year) <= datetime.date.today().year)):
            msg = bot.send_message(message.chat.id, "Ошибка в записи периода!\n ")
            enter_meter_data_period_call(message, meter_data_type, meter_data)
            return
    except ValueError:
        msg = bot.send_message(message.chat.id, "Ошибка в записи периода!\n ")
        enter_meter_data_period_call(message, meter_data_type, meter_data)
        return
    cursor.execute('Insert into meter_data(id_user, id_mdt, date, value) values(' +
                   str(message.chat.id) + ', ' +
                   str(id_mdt) + ', ' +
                   '\'' + year + '-' + month + '-01' + '\'' + ', ' +
                   '\'' + meter_data + '\'' + ')'
                   )
    connect.commit()
    bot.send_message(message.chat.id, "Ваши показания приняты\n ")


########################################################################################################################
#################################### ГРАФИКИ ПО ПОКАЗАНИЯМ #############################################################


@bot.message_handler(commands=['graphics'])
def choice_meter_data_type(message):
    # вывод списка типов показаний по квитанциям
    cursor.execute("SELECT md_name, md_active_row FROM meter_data_types;")
    md_types_message = ""
    meter_data_type_collection = []
    for row in cursor:
        md_types_message = md_types_message + row[0].strip() + " " + row[1] + '_' + "\n"
        meter_data_type_collection.append(row[1])
    msg = bot.send_message(message.chat.id, "По каким квитанциям "
                                            "вы хотите вывести статистику"
                                            " в виде графика?\n " + md_types_message)
    bot.register_next_step_handler(msg, lambda next_message: proof_meter_data_type(next_message, meter_data_type_collection))


def proof_meter_data_type(message, meter_data_type_collection):
    meter_data_type = message.text
    try:
        meter_data_type_collection.index(meter_data_type[0:len(meter_data_type)-1])
    except ValueError:
        msg = bot.send_message(message.chat.id, "Что-то пошло не так... попробуйте снова /graphics")
        return
    # bot.send_message(message.chat.id, "Ок. Я запомнил. " + meter_data_type)
    collect_meter_data(message, meter_data_type)


def collect_meter_data(message, meter_data_type):
    cursor.execute("select date, value from meter_data "
                   "left outer join meter_data_types "
                   "on meter_data_types.id_mdt=meter_data.id_mdt "
                   "where id_user=" + str(message.chat.id) + " "
                   "and md_active_row=\'" + meter_data_type[0:len(meter_data_type)-1] + "\'" + " order by value;")
    # запрос на получение пары (период, показание)
    periods = []
    values = []
    count_md = 0
    for row in cursor:
        periods.append(row[0].strftime("%m.%Y"))
        values.append(row[1])
        if count_md == 0:
            count_md = len(row[1].split(' '))
        if count_md != 0 and count_md != len(row[1].split(' ')):
            bot.send_message(message.chat.id, "Показания по данному типу квитанций не однородны. \n"
                                              "График построить не удалось.")
    send_graphics(message, meter_data_type, periods, values)
    print(periods, values)


def send_graphics(message, meter_data_type, periods, values):
    figure = plt.figure()
    mpl.rcParams['font.fantasy'] = 'Arial', 'Times New Roman', 'Tahoma'
    fig, ax = plt.subplots()
    # сбор показаний
    if len(values) < 2:
        bot.send_message(message.chat.id, "Значений слишком мало для статистики")

    delta_meter_data = ['0']
    md_type = meter_data_type[0:len(meter_data_type)-1]

    plt.grid(True)

    if md_type == "/md_1":
        i = 0
        while i < len(values) - 1:
            delta_meter_data.append(float(values[i + 1]) - float(values[i]))
            i += 1

    plt.title('График потребления ГАЗА по месяцам', {'fontname':'Tahoma'})
    plt.plot(periods, delta_meter_data, label='delta', color='red', linewidth=4.0)
    plt.xlabel('Периоды', {'fontname':'Arial'}, color='blue',fontweight='bold', fontsize=16)
    plt.ylabel('Потребление в месяц',  {'fontname':'Arial'}, color='green',fontweight='bold', fontsize=16)
    plt.legend()
    plt.tight_layout()
    fig.canvas.draw()
    ax.set_xticklabels(periods)
    labels = [item.get_text() for item in ax.get_xticklabels()]
    labels[0] = ''
    ax.set_xticklabels(labels)

    plt.savefig('%s.%s' % (str(message.chat.id), 'png'), fmt = 'png')
    graphic = open('%s.%s' % (str(message.chat.id), 'png'), 'rb')
    bot.send_photo(message.chat.id, graphic)
    graphic.close()
    plt.close()


if __name__ == '__main__':
    bot.polling(none_stop=True)


connect.close()
